{"version":3,"sources":["index.tsx"],"names":["React","View","TouchableWithoutFeedback","PaginationItem","Basic","props","activeDotStyle","dotStyle","progress","horizontal","data","size","containerStyle","renderItem","onPress","width","height","Error","justifyContent","alignSelf","flexDirection","map","item","index","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AAIA,SAASC,cAAT,QAA+B,kBAA/B;AAcA,OAAO,MAAMC,KAAK,GAAkBC,KAAf,IAAwC;AAC3D,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,UAAU,GAAG,IAJT;AAKJC,IAAAA,IALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,UARI;AASJC,IAAAA;AATI,MAUFT,KAVJ;AAYA,MACE,OAAOM,IAAP,KAAgB,QAAhB,IACA,QAAOJ,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAEQ,KAAjB,MAA2B,QAD3B,IAEA,QAAOR,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAES,MAAjB,MAA4B,QAH9B,EAKE,MAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AAEF,sBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,cAAc,EAAE,eADlB;AAEEC,MAAAA,SAAS,EAAE;AAFb,KADK,EAKLV,UAAU,GACN;AACAW,MAAAA,aAAa,EAAE;AADf,KADM,GAIN;AACAA,MAAAA,aAAa,EAAE;AADf,KATC,EAYLR,cAZK;AADT,KAgBGF,IAAI,CAACW,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,wBACE,oBAAC,wBAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,OAAO,EAAE,MAAMT,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAGS,KAAH;AAFxB,oBAIE,oBAAC,cAAD;AACE,MAAA,KAAK,EAAEA,KADT;AAEE,MAAA,IAAI,EAAEZ,IAFR;AAGE,MAAA,KAAK,EAAED,IAAI,CAACc,MAHd;AAIE,MAAA,QAAQ,EAAEjB,QAJZ;AAKE,MAAA,SAAS,EAAEC,QALb;AAME,MAAA,UAAU,EAAE,CAACC,UANf;AAOE,MAAA,cAAc,EAAEH;AAPlB,OASGO,UATH,aASGA,UATH,uBASGA,UAAU,CAAGS,IAAH,EAASC,KAAT,CATb,CAJF,CADF;AAkBD,GAnBA,CAhBH,CADF;AAuCD,CA3DM","sourcesContent":["import React from \"react\";\nimport type { StyleProp, ViewStyle } from \"react-native\";\nimport { View } from \"react-native\";\nimport { TouchableWithoutFeedback } from \"react-native-gesture-handler\";\nimport type { SharedValue } from \"react-native-reanimated\";\n\nimport type { DotStyle } from \"./PaginationItem\";\nimport { PaginationItem } from \"./PaginationItem\";\n\nexport interface BasicProps<T extends {} = {}> {\n  progress: SharedValue<number>\n  horizontal?: boolean\n  data: Array<T>\n  renderItem?: (item: T, index: number) => React.ReactNode\n  containerStyle?: StyleProp<ViewStyle>\n  dotStyle?: DotStyle\n  activeDotStyle?: DotStyle\n  size?: number\n  onPress?: (index: number) => void\n}\n\nexport const Basic = <T extends {}>(props: BasicProps<T>) => {\n  const {\n    activeDotStyle,\n    dotStyle,\n    progress,\n    horizontal = true,\n    data,\n    size,\n    containerStyle,\n    renderItem,\n    onPress,\n  } = props;\n\n  if (\n    typeof size === \"string\" ||\n    typeof dotStyle?.width === \"string\" ||\n    typeof dotStyle?.height === \"string\"\n  )\n    throw new Error(\"size/width/height must be a number\");\n\n  return (\n    <View\n      style={[\n        {\n          justifyContent: \"space-between\",\n          alignSelf: \"center\",\n        },\n        horizontal\n          ? {\n            flexDirection: \"row\",\n          }\n          : {\n            flexDirection: \"column\",\n          },\n        containerStyle,\n      ]}\n    >\n      {data.map((item, index) => {\n        return (\n          <TouchableWithoutFeedback\n            key={index}\n            onPress={() => onPress?.(index)}\n          >\n            <PaginationItem\n              index={index}\n              size={size}\n              count={data.length}\n              dotStyle={dotStyle}\n              animValue={progress}\n              horizontal={!horizontal}\n              activeDotStyle={activeDotStyle}\n            >\n              {renderItem?.(item, index)}\n            </PaginationItem>\n          </TouchableWithoutFeedback>\n        );\n      })}\n    </View>\n  );\n};\n"]}